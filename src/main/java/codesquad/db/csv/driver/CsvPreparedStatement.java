package codesquad.db.csv.driver;

import static codesquad.utils.CsvParser.parseInsertStatement;
import static codesquad.utils.CsvParser.parseSelectStatement;
import static codesquad.utils.CsvUtil.generateCsvFiles;
import static codesquad.utils.CsvUtil.readCsv;
import static codesquad.utils.CsvUtil.removeCsvFile;
import static codesquad.utils.CsvUtil.writeCsv;

import codesquad.data.Comment;
import codesquad.data.Post;
import codesquad.data.UploadFile;
import codesquad.data.User;
import codesquad.error.BaseException;
import codesquad.utils.CsvParser;
import codesquad.utils.CsvParser.InsertStatement;
import codesquad.utils.CsvParser.SelectStatement;
import codesquad.utils.CsvParser.Table;
import java.io.InputStream;
import java.io.Reader;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class CsvPreparedStatement implements PreparedStatement {

	private String sql;
	private int autoGeneratedkeys;
	private List<Integer> generatedKeys = new ArrayList<>();
	private final Map<String, Class<?>> tableNameClassMap = Map.of(
		"post", Post.class,
		"comment", Comment.class,
		"uploadfile", UploadFile.class,
		"users", User.class
	);

	public CsvPreparedStatement(String sql) {
		this.sql = sql.replaceAll("\n", " ");
		autoGeneratedkeys = -1;
	}

	public CsvPreparedStatement(String sql, int autoGeneratedKeys) {
		this.sql = sql.replaceAll("\n", " ");
		this.autoGeneratedkeys = autoGeneratedKeys;
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		if (sql.toLowerCase().startsWith("select")) {
			return executeSelectQuery();
		}
		throw BaseException.serverException();
	}

	private ResultSet executeSelectQuery() {
		SelectStatement selectStatement = parseSelectStatement(sql);
		String tableName = selectStatement.tableName();
		List<String[]> records = readCsv(tableName);
		List<String[]> filteredRecords = new ArrayList<>();

		boolean first = true;
		for (String[] record : records) {
			if (first) {
				first = false;
				continue;
			}
			if (selectStatement.condition() == null || recordMatchesCondition(records.get(0), record,
				selectStatement.condition())) {
				filteredRecords.add(record);
			}
		}

		return new CsvResultSet(filteredRecords, records.get(0), determineTypes(tableName, records.get(0)));
	}

	private Class<?>[] determineTypes(String tableName, String[] headers) {
		tableName = tableName.toLowerCase();
		Class<?> clazz = tableNameClassMap.get(tableName);
		Field[] fields = clazz.getDeclaredFields();
		Class<?>[] types = new Class<?>[headers.length];

		for (int i = 0; i < headers.length; i++) {
			for (Field field : fields) {
				if (field.getName().equalsIgnoreCase(headers[i])) {
					types[i] = field.getType();
					break;
				}
			}
		}
		return types;
	}

	private boolean recordMatchesCondition(String[] columns, String[] record, String condition) {
		String[] parts = condition.split("=");
		if (parts.length == 2) {
			String column = parts[0].trim();
			String value = parts[1].trim().replace("'", "");
			for (int i = 0; i < columns.length; i++) {
				if (columns[i].equalsIgnoreCase(column)) {
					return record[i].equals(value);
				}
			}
		}
		return false;
	}

	private String extractTableName(String sql) {
		Pattern pattern = Pattern.compile("from (\\w+)", Pattern.CASE_INSENSITIVE);
		Matcher matcher = pattern.matcher(sql);
		if (matcher.find()) {
			return matcher.group(1);
		}
		return null;
	}

	@Override
	public int executeUpdate() throws SQLException {
		if (sql.toLowerCase().contains("drop")) {
			String[] split = sql.split(" ");
			removeCsvFile(split[4].substring(0, split[4].length() - 1));
			return 0;
		}
		if (sql.toLowerCase().contains("create")) {
			List<Table> tables = CsvParser.parseCreateTableStatements(sql);
			generateCsvFiles(tables.get(0));
		}
		if (sql.toLowerCase().contains("insert")) {
			InsertStatement insertStatement = parseInsertStatement(sql);
			String tableName = insertStatement.tableName();
			String[] columns = insertStatement.columns();
			String[] values = insertStatement.values();

			List<String[]> records = readCsv(tableName);
			List<String[]> data = new ArrayList<>(records);
			generatedKeys.add(data.size());

			String[] newRecord = new String[columns.length];
			for (int i = 0; i < columns.length; i++) {
				newRecord[i] = values[i].trim().replace("'", "");
			}

			data.add(newRecord);
			writeCsv(tableName, data);
			return 1;
		}
		return 0;
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		sql = sql.replaceFirst("\\?", x);
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		sql = sql.replaceFirst("\\?", Base64.getEncoder().encodeToString(x));
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		sql = sql.replaceFirst("\\?", String.valueOf(x));
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		sql = sql.replaceFirst("\\?", x.toString());
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		List<String[]> keys = new ArrayList<>();
		for (Integer key : generatedKeys) {
			keys.add(new String[]{key.toString()});
		}
		return new CsvResultSet(keys, null, null);
	}

	@Override
	public void close() throws SQLException {
	}


	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return null;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return 0;
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {

	}

	@Override
	public int getMaxRows() throws SQLException {
		return 0;
	}

	@Override
	public void setMaxRows(int max) throws SQLException {

	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {

	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return 0;
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {

	}

	@Override
	public void cancel() throws SQLException {

	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {

	}

	@Override
	public void setCursorName(String name) throws SQLException {

	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return false;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return null;
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return false;
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {

	}

	@Override
	public int getFetchDirection() throws SQLException {
		return 0;
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {

	}

	@Override
	public int getFetchSize() throws SQLException {
		return 0;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return 0;
	}

	@Override
	public int getResultSetType() throws SQLException {
		return 0;
	}

	@Override
	public void addBatch(String sql) throws SQLException {

	}

	@Override
	public void clearBatch() throws SQLException {

	}

	@Override
	public int[] executeBatch() throws SQLException {
		return new int[0];
	}

	@Override
	public Connection getConnection() throws SQLException {
		return null;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return false;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return 0;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return 0;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return 0;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return false;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return false;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return false;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return false;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {

	}

	@Override
	public boolean isPoolable() throws SQLException {
		return false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return false;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {

	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {

	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {

	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {

	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {

	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {

	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {

	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {

	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {

	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {

	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {

	}

	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {

	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {

	}

	@Override
	public void clearParameters() throws SQLException {

	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {

	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {

	}

	@Override
	public boolean execute() throws SQLException {
		return false;
	}

	@Override
	public void addBatch() throws SQLException {

	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {

	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {

	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {

	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {

	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {

	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return null;
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {

	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {

	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {

	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {

	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {

	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return null;
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {

	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {

	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {

	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {

	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {

	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {

	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {

	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {

	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {

	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {

	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {

	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {

	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {

	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {

	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {

	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {

	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {

	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {

	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {

	}
}
